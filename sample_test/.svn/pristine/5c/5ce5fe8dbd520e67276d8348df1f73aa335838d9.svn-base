package com.example.demo.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;

import com.example.demo.form.ItemRegisterForm;
import com.example.demo.repository.ItemRepository;
import com.example.demo.repository.StockRepository;

@SpringBootTest
@Transactional

class ItemRegisterControllerTest {

	@MockBean
	StockRepository repository;

	@MockBean
	ItemRepository repo;

	@Autowired
	ItemRegisterController regi;

	ItemRegisterForm form = new ItemRegisterForm();

	MockMvc mock;

	@BeforeEach
	void setup() {
		this.mock = MockMvcBuilders.standaloneSetup(regi).build();
	}

	/**
	 * 入力値の検証
	 * validationに該当しない
	 * 完了画面へ遷移の検証
	 * 各リポジトリのinseertメソッドの呼び出し回数
	 * @throws Exception
	 */

	@Test
	void testRegister1_1() throws Exception {

		form.setMaterial_name("塚田");
		form.setRegular_price("1000");

		mock.perform(get("/register").param("material_name", "塚田").param("regular_price", "1000"))
				.andExpect(model().hasNoErrors())
				.andExpect(view().name("message"));

		verify(repo, times(1)).insert(form);
		verify(repository, times(1)).insert(form);
	}

	/**
	 * 商品名の異常値の検証
	 * validationエラーの検証
	 * modelの検証
	 * 商品登録画面遷移の検証
	 * 該当するエラーメッセージの検証
	 * @throws Exception
	 */

	@Test
	void testRegister1_2() throws Exception {
		form.setMaterial_name("");
		form.setMaterial_stock("aaa");
		form.setRegular_price("aaa");

		ResultActions result = mock
				.perform(get("/register").param("material_name", "").param("material_stock", "aaa")
						.param("regular_price", "aaa"))
				.andExpect(model().hasErrors())
				.andExpect(model().errorCount(3))
				.andExpect(model().attribute("form", form))
				.andExpect(view().name("register.html"));

		BindingResult bindResult = (BindingResult) result.andReturn().getModelAndView().getModel()
				.get(BindingResult.MODEL_KEY_PREFIX + "itemRegisterForm");
		String message = bindResult.getFieldError().getDefaultMessage();
		assertEquals("・在庫数は半角数字の入力をお願いします。", message);
	}
	
	/**
	 * 在庫数の異常値の検証
	 * validationエラーの検証
	 * modelの検証
	 * 商品登録画面遷移の検証
	 * 該当するエラーメッセージの検証
	 * @throws Exception
	 */
	@Test
	void testRegister1_3() throws Exception {
		form.setMaterial_name("a");
		form.setMaterial_stock("aaa");

		ResultActions result = mock
				.perform(get("/register").param("material_name", "a").param("material_stock", "aaa"))
				.andExpect(model().hasErrors())
				.andExpect(model().errorCount(1))
				.andExpect(model().attribute("form", form))
				.andExpect(view().name("register.html"));

		BindingResult bindResult = (BindingResult) result.andReturn().getModelAndView().getModel()
				.get(BindingResult.MODEL_KEY_PREFIX + "itemRegisterForm");
		String message = bindResult.getFieldError().getDefaultMessage();
		assertEquals("・在庫数は半角数字の入力をお願いします。", message);
	}

	/**
	 * 販売価格の異常値の検証
	 * validationエラーの検証
	 * modelの検証
	 * 商品登録画面遷移の検証
	 * 該当するエラーメッセージの検証
	 * @throws Exception
	 */
	@Test
	void testRegister1_4() throws Exception {
		form.setMaterial_name("a");
		form.setRegular_price("aaa");

		ResultActions result = mock
				.perform(get("/register").param("material_name", "a").param("regular_price", "aaa"))
				.andExpect(model().hasErrors())
				.andExpect(model().errorCount(1))
				.andExpect(model().attribute("form", form))
				.andExpect(view().name("register.html"));

		BindingResult bindResult = (BindingResult) result.andReturn().getModelAndView().getModel()
				.get(BindingResult.MODEL_KEY_PREFIX + "itemRegisterForm");
		String message = bindResult.getFieldError().getDefaultMessage();
		assertEquals("・価格は半角数字の入力をお願いします。", message);
	}

}
