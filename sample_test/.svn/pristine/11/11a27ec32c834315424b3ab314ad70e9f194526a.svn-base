package com.example.demo.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.example.demo.form.ItemForm;
import com.example.demo.repository.ItemRepository;

@SpringBootTest
class ItemControllerTest {

	@MockBean
	ItemRepository repository;

	@Autowired
	ItemController controller;

	ItemForm form = new ItemForm();

	MockMvc mock;

	@BeforeEach
	void setup() {
		mock = MockMvcBuilders.standaloneSetup(controller).build();
	}

	@Test
	void test() throws Exception {
		mock.perform(get("/item"))
				.andExpect(model().attribute("form", form))
				.andExpect(status().isOk())
				.andExpect(view().name("item.html"));
	}

	@Test
	void testSearch1_1() throws Exception {
		mock.perform(get("/result").param("material_id", "aaa"))
				.andExpect(model().attributeHasErrors("itemForm"))
				.andExpect(model().errorCount(1))
				.andExpect(status().isOk())
				.andExpect(view().name("item"));
	}

	@Test
	void testSearch1_3() throws Exception {
		form.setMaterial_id("1");

		mock.perform(get("/result").param("material_id", "1"))
				.andExpect(model().hasNoErrors())
				.andExpect(model().attribute("itemForm", form))
				.andExpect(status().isOk())
				.andExpect(view().name("item"));
	}

}
