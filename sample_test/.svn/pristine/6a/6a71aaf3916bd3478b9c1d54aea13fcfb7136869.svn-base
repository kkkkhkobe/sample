package com.example.demo.controller;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.example.demo.form.UserForm;
import com.example.demo.service.SearchService;

@SpringBootTest
class SearchControllerTest {

	@MockBean
	SearchService service;

	@Autowired
	SearchController controller;

	MockMvc mock;

	UserForm form = new UserForm();

	@BeforeEach
	void setup() {
		mock = MockMvcBuilders.standaloneSetup(controller).build();
	}

	@Test
	void test() throws Exception {
		mock.perform(get("/user").flashAttr("form", form))
				.andExpect(model().attribute("search", form))
				.andExpect(view().name("user.html"));
	}

	@Test
	void testSearch1_1() throws Exception {
		mock.perform(get("/search").param("user_id", "aaa"))
				.andExpect(model().attributeHasErrors("userForm"))
				.andExpect(model().errorCount(1))
				.andExpect(model().attributeHasFieldErrorCode("userForm", "user_id", "Pattern"))
				.andExpect(status().isOk())
				.andExpect(view().name("user"));
	}

	@Test
	void testSearch1_2() throws Exception {
		form.setUser_id("1");

		mock.perform(get("/search").param("user_id", "1"))
				.andExpect(model().hasNoErrors())
				.andExpect(status().isOk())
				.andExpect(view().name("user"));

		verify(service, times(1)).list(form);

	}

}
